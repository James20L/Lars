// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lars.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lars_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lars_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lars_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lars_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lars_2eproto;
namespace lars {
class GetHostRequest;
class GetHostRequestDefaultTypeInternal;
extern GetHostRequestDefaultTypeInternal _GetHostRequest_default_instance_;
class GetHostResponse;
class GetHostResponseDefaultTypeInternal;
extern GetHostResponseDefaultTypeInternal _GetHostResponse_default_instance_;
class GetRouteRequest;
class GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class GetRouteResponse;
class GetRouteResponseDefaultTypeInternal;
extern GetRouteResponseDefaultTypeInternal _GetRouteResponse_default_instance_;
class HostCallResult;
class HostCallResultDefaultTypeInternal;
extern HostCallResultDefaultTypeInternal _HostCallResult_default_instance_;
class HostInfo;
class HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class ReportRequest;
class ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportStatusRequest;
class ReportStatusRequestDefaultTypeInternal;
extern ReportStatusRequestDefaultTypeInternal _ReportStatusRequest_default_instance_;
}  // namespace lars
PROTOBUF_NAMESPACE_OPEN
template<> ::lars::GetHostRequest* Arena::CreateMaybeMessage<::lars::GetHostRequest>(Arena*);
template<> ::lars::GetHostResponse* Arena::CreateMaybeMessage<::lars::GetHostResponse>(Arena*);
template<> ::lars::GetRouteRequest* Arena::CreateMaybeMessage<::lars::GetRouteRequest>(Arena*);
template<> ::lars::GetRouteResponse* Arena::CreateMaybeMessage<::lars::GetRouteResponse>(Arena*);
template<> ::lars::HostCallResult* Arena::CreateMaybeMessage<::lars::HostCallResult>(Arena*);
template<> ::lars::HostInfo* Arena::CreateMaybeMessage<::lars::HostInfo>(Arena*);
template<> ::lars::ReportRequest* Arena::CreateMaybeMessage<::lars::ReportRequest>(Arena*);
template<> ::lars::ReportStatusRequest* Arena::CreateMaybeMessage<::lars::ReportStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lars {

enum MessageId : int {
  ID_UNKNOW = 0,
  ID_GetRouteRequest = 1,
  ID_GetRouteResponse = 2,
  ID_ReportStatusRequest = 3,
  ID_GetHostRequest = 4,
  ID_GetHostResponse = 5,
  ID_ReportRequest = 6,
  MessageId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageId_IsValid(int value);
constexpr MessageId MessageId_MIN = ID_UNKNOW;
constexpr MessageId MessageId_MAX = ID_ReportRequest;
constexpr int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor();
template<typename T>
inline const std::string& MessageId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageId_descriptor(), enum_t_value);
}
inline bool MessageId_Parse(
    const std::string& name, MessageId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
enum LarsRetCode : int {
  RET_SUCC = 0,
  RET_OVERLOAD = 1,
  RET_SYSTEM_ERROR = 2,
  RET_NOEXIST = 3,
  LarsRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LarsRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LarsRetCode_IsValid(int value);
constexpr LarsRetCode LarsRetCode_MIN = RET_SUCC;
constexpr LarsRetCode LarsRetCode_MAX = RET_NOEXIST;
constexpr int LarsRetCode_ARRAYSIZE = LarsRetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LarsRetCode_descriptor();
template<typename T>
inline const std::string& LarsRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LarsRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LarsRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LarsRetCode_descriptor(), enum_t_value);
}
inline bool LarsRetCode_Parse(
    const std::string& name, LarsRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LarsRetCode>(
    LarsRetCode_descriptor(), name, value);
}
// ===================================================================

class HostInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.HostInfo) */ {
 public:
  HostInfo();
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return CreateMaybeMessage<HostInfo>(nullptr);
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.HostInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.HostInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class GetRouteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.GetRouteRequest) */ {
 public:
  GetRouteRequest();
  virtual ~GetRouteRequest();

  GetRouteRequest(const GetRouteRequest& from);
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRouteRequest* New() const final {
    return CreateMaybeMessage<GetRouteRequest>(nullptr);
  }

  GetRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRouteRequest& from);
  void MergeFrom(const GetRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.GetRouteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kCmdidFieldNumber = 2,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 2;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.GetRouteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class GetRouteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.GetRouteResponse) */ {
 public:
  GetRouteResponse();
  virtual ~GetRouteResponse();

  GetRouteResponse(const GetRouteResponse& from);
  GetRouteResponse(GetRouteResponse&& from) noexcept
    : GetRouteResponse() {
    *this = ::std::move(from);
  }

  inline GetRouteResponse& operator=(const GetRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteResponse& operator=(GetRouteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRouteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRouteResponse* internal_default_instance() {
    return reinterpret_cast<const GetRouteResponse*>(
               &_GetRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRouteResponse& a, GetRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRouteResponse* New() const final {
    return CreateMaybeMessage<GetRouteResponse>(nullptr);
  }

  GetRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRouteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRouteResponse& from);
  void MergeFrom(const GetRouteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.GetRouteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 3,
    kModidFieldNumber = 1,
    kCmdidFieldNumber = 2,
  };
  // repeated .lars.HostInfo host = 3;
  int host_size() const;
  void clear_host();
  ::lars::HostInfo* mutable_host(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostInfo >*
      mutable_host();
  const ::lars::HostInfo& host(int index) const;
  ::lars::HostInfo* add_host();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostInfo >&
      host() const;

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 2;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.GetRouteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostInfo > host_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class HostCallResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.HostCallResult) */ {
 public:
  HostCallResult();
  virtual ~HostCallResult();

  HostCallResult(const HostCallResult& from);
  HostCallResult(HostCallResult&& from) noexcept
    : HostCallResult() {
    *this = ::std::move(from);
  }

  inline HostCallResult& operator=(const HostCallResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostCallResult& operator=(HostCallResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostCallResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostCallResult* internal_default_instance() {
    return reinterpret_cast<const HostCallResult*>(
               &_HostCallResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostCallResult& a, HostCallResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HostCallResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostCallResult* New() const final {
    return CreateMaybeMessage<HostCallResult>(nullptr);
  }

  HostCallResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostCallResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostCallResult& from);
  void MergeFrom(const HostCallResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostCallResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.HostCallResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kSuccFieldNumber = 3,
    kErrFieldNumber = 4,
    kOverloadFieldNumber = 5,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 succ = 3;
  void clear_succ();
  ::PROTOBUF_NAMESPACE_ID::uint32 succ() const;
  void set_succ(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 err = 4;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::uint32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool overload = 5;
  void clear_overload();
  bool overload() const;
  void set_overload(bool value);

  // @@protoc_insertion_point(class_scope:lars.HostCallResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 succ_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_;
  bool overload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class ReportStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.ReportStatusRequest) */ {
 public:
  ReportStatusRequest();
  virtual ~ReportStatusRequest();

  ReportStatusRequest(const ReportStatusRequest& from);
  ReportStatusRequest(ReportStatusRequest&& from) noexcept
    : ReportStatusRequest() {
    *this = ::std::move(from);
  }

  inline ReportStatusRequest& operator=(const ReportStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportStatusRequest& operator=(ReportStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ReportStatusRequest*>(
               &_ReportStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReportStatusRequest& a, ReportStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportStatusRequest* New() const final {
    return CreateMaybeMessage<ReportStatusRequest>(nullptr);
  }

  ReportStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportStatusRequest& from);
  void MergeFrom(const ReportStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.ReportStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kModidFieldNumber = 1,
    kCmdidFieldNumber = 2,
    kCallerFieldNumber = 3,
    kTsFieldNumber = 5,
  };
  // repeated .lars.HostCallResult results = 4;
  int results_size() const;
  void clear_results();
  ::lars::HostCallResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostCallResult >*
      mutable_results();
  const ::lars::HostCallResult& results(int index) const;
  ::lars::HostCallResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostCallResult >&
      results() const;

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 2;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 caller = 3;
  void clear_caller();
  ::PROTOBUF_NAMESPACE_ID::int32 caller() const;
  void set_caller(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 ts = 5;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:lars.ReportStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostCallResult > results_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::int32 caller_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class GetHostRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.GetHostRequest) */ {
 public:
  GetHostRequest();
  virtual ~GetHostRequest();

  GetHostRequest(const GetHostRequest& from);
  GetHostRequest(GetHostRequest&& from) noexcept
    : GetHostRequest() {
    *this = ::std::move(from);
  }

  inline GetHostRequest& operator=(const GetHostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostRequest& operator=(GetHostRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHostRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHostRequest* internal_default_instance() {
    return reinterpret_cast<const GetHostRequest*>(
               &_GetHostRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetHostRequest& a, GetHostRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHostRequest* New() const final {
    return CreateMaybeMessage<GetHostRequest>(nullptr);
  }

  GetHostRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHostRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHostRequest& from);
  void MergeFrom(const GetHostRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHostRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.GetHostRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kModidFieldNumber = 2,
    kCmdidFieldNumber = 3,
  };
  // uint32 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modid = 2;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 3;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.GetHostRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class GetHostResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.GetHostResponse) */ {
 public:
  GetHostResponse();
  virtual ~GetHostResponse();

  GetHostResponse(const GetHostResponse& from);
  GetHostResponse(GetHostResponse&& from) noexcept
    : GetHostResponse() {
    *this = ::std::move(from);
  }

  inline GetHostResponse& operator=(const GetHostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostResponse& operator=(GetHostResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHostResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHostResponse* internal_default_instance() {
    return reinterpret_cast<const GetHostResponse*>(
               &_GetHostResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetHostResponse& a, GetHostResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHostResponse* New() const final {
    return CreateMaybeMessage<GetHostResponse>(nullptr);
  }

  GetHostResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHostResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHostResponse& from);
  void MergeFrom(const GetHostResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHostResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.GetHostResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 5,
    kSeqFieldNumber = 1,
    kModidFieldNumber = 2,
    kCmdidFieldNumber = 3,
    kRetcodeFieldNumber = 4,
  };
  // .lars.HostInfo host = 5;
  bool has_host() const;
  void clear_host();
  const ::lars::HostInfo& host() const;
  ::lars::HostInfo* release_host();
  ::lars::HostInfo* mutable_host();
  void set_allocated_host(::lars::HostInfo* host);

  // uint32 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modid = 2;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 3;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 retcode = 4;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.GetHostResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lars::HostInfo* host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// -------------------------------------------------------------------

class ReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lars.ReportRequest) */ {
 public:
  ReportRequest();
  virtual ~ReportRequest();

  ReportRequest(const ReportRequest& from);
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportRequest* New() const final {
    return CreateMaybeMessage<ReportRequest>(nullptr);
  }

  ReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportRequest& from);
  void MergeFrom(const ReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lars.ReportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lars_2eproto);
    return ::descriptor_table_lars_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 3,
    kModidFieldNumber = 1,
    kCmdidFieldNumber = 2,
    kRetcodeFieldNumber = 4,
  };
  // .lars.HostInfo host = 3;
  bool has_host() const;
  void clear_host();
  const ::lars::HostInfo& host() const;
  ::lars::HostInfo* release_host();
  ::lars::HostInfo* mutable_host();
  void set_allocated_host(::lars::HostInfo* host);

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cmdid = 2;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 retcode = 4;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lars.ReportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lars::HostInfo* host_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lars_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostInfo

// int32 ip = 1;
inline void HostInfo::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::ip() const {
  // @@protoc_insertion_point(field_get:lars.HostInfo.ip)
  return ip_;
}
inline void HostInfo::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:lars.HostInfo.ip)
}

// int32 port = 2;
inline void HostInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::port() const {
  // @@protoc_insertion_point(field_get:lars.HostInfo.port)
  return port_;
}
inline void HostInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lars.HostInfo.port)
}

// -------------------------------------------------------------------

// GetRouteRequest

// int32 modid = 1;
inline void GetRouteRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouteRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteRequest.modid)
  return modid_;
}
inline void GetRouteRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteRequest.modid)
}

// int32 cmdid = 2;
inline void GetRouteRequest::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouteRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteRequest.cmdid)
  return cmdid_;
}
inline void GetRouteRequest::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteRequest.cmdid)
}

// -------------------------------------------------------------------

// GetRouteResponse

// int32 modid = 1;
inline void GetRouteResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouteResponse::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.modid)
  return modid_;
}
inline void GetRouteResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteResponse.modid)
}

// int32 cmdid = 2;
inline void GetRouteResponse::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouteResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.cmdid)
  return cmdid_;
}
inline void GetRouteResponse::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteResponse.cmdid)
}

// repeated .lars.HostInfo host = 3;
inline int GetRouteResponse::host_size() const {
  return host_.size();
}
inline void GetRouteResponse::clear_host() {
  host_.Clear();
}
inline ::lars::HostInfo* GetRouteResponse::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:lars.GetRouteResponse.host)
  return host_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostInfo >*
GetRouteResponse::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:lars.GetRouteResponse.host)
  return &host_;
}
inline const ::lars::HostInfo& GetRouteResponse::host(int index) const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.host)
  return host_.Get(index);
}
inline ::lars::HostInfo* GetRouteResponse::add_host() {
  // @@protoc_insertion_point(field_add:lars.GetRouteResponse.host)
  return host_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostInfo >&
GetRouteResponse::host() const {
  // @@protoc_insertion_point(field_list:lars.GetRouteResponse.host)
  return host_;
}

// -------------------------------------------------------------------

// HostCallResult

// int32 ip = 1;
inline void HostCallResult::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostCallResult::ip() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.ip)
  return ip_;
}
inline void HostCallResult::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.ip)
}

// int32 port = 2;
inline void HostCallResult::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostCallResult::port() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.port)
  return port_;
}
inline void HostCallResult::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.port)
}

// uint32 succ = 3;
inline void HostCallResult::clear_succ() {
  succ_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostCallResult::succ() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.succ)
  return succ_;
}
inline void HostCallResult::set_succ(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  succ_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.succ)
}

// uint32 err = 4;
inline void HostCallResult::clear_err() {
  err_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostCallResult::err() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.err)
  return err_;
}
inline void HostCallResult::set_err(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.err)
}

// bool overload = 5;
inline void HostCallResult::clear_overload() {
  overload_ = false;
}
inline bool HostCallResult::overload() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.overload)
  return overload_;
}
inline void HostCallResult::set_overload(bool value) {
  
  overload_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.overload)
}

// -------------------------------------------------------------------

// ReportStatusRequest

// int32 modid = 1;
inline void ReportStatusRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportStatusRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.modid)
  return modid_;
}
inline void ReportStatusRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.modid)
}

// int32 cmdid = 2;
inline void ReportStatusRequest::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportStatusRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.cmdid)
  return cmdid_;
}
inline void ReportStatusRequest::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.cmdid)
}

// int32 caller = 3;
inline void ReportStatusRequest::clear_caller() {
  caller_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportStatusRequest::caller() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.caller)
  return caller_;
}
inline void ReportStatusRequest::set_caller(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  caller_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.caller)
}

// repeated .lars.HostCallResult results = 4;
inline int ReportStatusRequest::results_size() const {
  return results_.size();
}
inline void ReportStatusRequest::clear_results() {
  results_.Clear();
}
inline ::lars::HostCallResult* ReportStatusRequest::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:lars.ReportStatusRequest.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostCallResult >*
ReportStatusRequest::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:lars.ReportStatusRequest.results)
  return &results_;
}
inline const ::lars::HostCallResult& ReportStatusRequest::results(int index) const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.results)
  return results_.Get(index);
}
inline ::lars::HostCallResult* ReportStatusRequest::add_results() {
  // @@protoc_insertion_point(field_add:lars.ReportStatusRequest.results)
  return results_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lars::HostCallResult >&
ReportStatusRequest::results() const {
  // @@protoc_insertion_point(field_list:lars.ReportStatusRequest.results)
  return results_;
}

// uint32 ts = 5;
inline void ReportStatusRequest::clear_ts() {
  ts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportStatusRequest::ts() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.ts)
  return ts_;
}
inline void ReportStatusRequest::set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.ts)
}

// -------------------------------------------------------------------

// GetHostRequest

// uint32 seq = 1;
inline void GetHostRequest::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetHostRequest::seq() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.seq)
  return seq_;
}
inline void GetHostRequest::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.seq)
}

// int32 modid = 2;
inline void GetHostRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHostRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.modid)
  return modid_;
}
inline void GetHostRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.modid)
}

// int32 cmdid = 3;
inline void GetHostRequest::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHostRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.cmdid)
  return cmdid_;
}
inline void GetHostRequest::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.cmdid)
}

// -------------------------------------------------------------------

// GetHostResponse

// uint32 seq = 1;
inline void GetHostResponse::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetHostResponse::seq() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.seq)
  return seq_;
}
inline void GetHostResponse::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.seq)
}

// int32 modid = 2;
inline void GetHostResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHostResponse::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.modid)
  return modid_;
}
inline void GetHostResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.modid)
}

// int32 cmdid = 3;
inline void GetHostResponse::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHostResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.cmdid)
  return cmdid_;
}
inline void GetHostResponse::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.cmdid)
}

// int32 retcode = 4;
inline void GetHostResponse::clear_retcode() {
  retcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHostResponse::retcode() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.retcode)
  return retcode_;
}
inline void GetHostResponse::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.retcode)
}

// .lars.HostInfo host = 5;
inline bool GetHostResponse::has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline void GetHostResponse::clear_host() {
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::lars::HostInfo& GetHostResponse::host() const {
  const ::lars::HostInfo* p = host_;
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.host)
  return p != nullptr ? *p : *reinterpret_cast<const ::lars::HostInfo*>(
      &::lars::_HostInfo_default_instance_);
}
inline ::lars::HostInfo* GetHostResponse::release_host() {
  // @@protoc_insertion_point(field_release:lars.GetHostResponse.host)
  
  ::lars::HostInfo* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::lars::HostInfo* GetHostResponse::mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::lars::HostInfo>(GetArenaNoVirtual());
    host_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lars.GetHostResponse.host)
  return host_;
}
inline void GetHostResponse::set_allocated_host(::lars::HostInfo* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:lars.GetHostResponse.host)
}

// -------------------------------------------------------------------

// ReportRequest

// int32 modid = 1;
inline void ReportRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.modid)
  return modid_;
}
inline void ReportRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.modid)
}

// int32 cmdid = 2;
inline void ReportRequest::clear_cmdid() {
  cmdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.cmdid)
  return cmdid_;
}
inline void ReportRequest::set_cmdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.cmdid)
}

// .lars.HostInfo host = 3;
inline bool ReportRequest::has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline void ReportRequest::clear_host() {
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::lars::HostInfo& ReportRequest::host() const {
  const ::lars::HostInfo* p = host_;
  // @@protoc_insertion_point(field_get:lars.ReportRequest.host)
  return p != nullptr ? *p : *reinterpret_cast<const ::lars::HostInfo*>(
      &::lars::_HostInfo_default_instance_);
}
inline ::lars::HostInfo* ReportRequest::release_host() {
  // @@protoc_insertion_point(field_release:lars.ReportRequest.host)
  
  ::lars::HostInfo* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::lars::HostInfo* ReportRequest::mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::lars::HostInfo>(GetArenaNoVirtual());
    host_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lars.ReportRequest.host)
  return host_;
}
inline void ReportRequest::set_allocated_host(::lars::HostInfo* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:lars.ReportRequest.host)
}

// int32 retcode = 4;
inline void ReportRequest::clear_retcode() {
  retcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportRequest::retcode() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.retcode)
  return retcode_;
}
inline void ReportRequest::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.retcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lars

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lars::MessageId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lars::MessageId>() {
  return ::lars::MessageId_descriptor();
}
template <> struct is_proto_enum< ::lars::LarsRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lars::LarsRetCode>() {
  return ::lars::LarsRetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lars_2eproto
